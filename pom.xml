<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.sos-berlin</groupId>
		<artifactId>company-pom</artifactId>
		<version>1.8.12</version>
	</parent>

	<version>1.10-SNAPSHOT</version>
	<artifactId>products</artifactId>
	<packaging>pom</packaging>
	<name>${project.artifactId}</name>
	<inceptionYear>2014</inceptionYear>

  <scm>
      <connection>scm:git:git@github.com:sos-berlin/all.git</connection>
      <developerConnection>scm:git:git@github.com:sos-berlin/all.git</developerConnection>
      <url>https://github.com/sos-berlin/all</url>
  </scm>

	<properties>
		<sos.engine.version>${project.version}</sos.engine.version>
		<project.base.path>${project.artifactId}</project.base.path>
		<!-- The current encoding properties - should be changed to UTF-8 -->
		<project.build.sourceEncoding>Cp1252</project.build.sourceEncoding>
		<project.reporting.outputEncoding>Cp1252</project.reporting.outputEncoding>
	</properties>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>get-resources</id>
						<phase>pre-site</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>com.sos-berlin.commons</groupId>
									<artifactId>common-resources</artifactId>
									<version>${project.version}</version>
									<type>jar</type>
									<overWrite>false</overWrite>
								</artifactItem>
							</artifactItems>
							<outputDirectory>${project.build.directory}/common-resources</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<modules>
		<module>commons</module>
		<module>commons-graphviz</module>
		<module>commons-jobscheduler</module>
		<module>joe</module>
		<module>jade</module>
		<module>jid</module>
		<module>jitl</module>
		<module>joc</module>
		<module>notification</module>
	</modules>

	<profiles>

        <!-- This profile is for collecting the sources of all artifacts in one jar (in the install phase). In case of deployment the sources will also deployed -->
        <profile>
            <id>collect-sources</id>

            <build>
                <plugins>

                    <!-- Aggregate the source of all artifacts -->
                    <plugin>
                        <artifactId>maven-source-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>aggregate-sources</id>
                                <goals>
                                    <goal>aggregate</goal>
                                </goals>
                                <inherited>false</inherited>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>

            </build>

        </profile>

		<profile>
			<id>build-3rdParty-licences-file</id>
			<build>
				<plugins>
					<!-- generates a 3rdParty-licences.txt -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>license-maven-plugin</artifactId>
						<version>1.7</version>
						<executions>
							<execution>
								<id>download-3rdParty-licenses</id>
								<goals>
									<goal>aggregate-add-third-party</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/licences</outputDirectory>
									<thirdPartyFilename>3rdParty-licences.txt</thirdPartyFilename>
									<sortArtifactByName>true</sortArtifactByName>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>init</id>
			<properties>
				<versionBranch>master</versionBranch>
				<releaseVersion>1.9.1</releaseVersion>
				<snapshotVersion>1.9.1-SNAPSHOT</snapshotVersion>
			</properties>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-resources</id>
								<phase>initialize</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<inherited>false</inherited>
								<configuration>
									<outputDirectory>${project.basedir}/generated</outputDirectory>
									<resources>
										<resource>
											<directory>${basedir}/src/main/templates</directory>
											<!-- do not remove the includes element. It is necessary to copy 
												even one module -->
											<includes>
												<include>**</include>
											</includes>
											<filtering>true</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.7</version>
						<executions>
							<execution>
	                        <id>change-permissions</id>
	                        <phase>initialize</phase>
	                        <goals>
	                        	<goal>run</goal>
	                        </goals>
							<inherited>false</inherited>
	                        <configuration>
								<target name="change-permission">
									<chmod dir="${project.basedir}/generated" includes="*.sh" perm="775" />
								</target>
							</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>exec-maven-plugin</artifactId>
						<groupId>org.codehaus.mojo</groupId>
						<version>1.3.2</version>
						<executions>
							<execution>
								<!-- runs the script to checkout the branch explicitly -->
								<id>checkout-branch</id>
								<phase>initialize</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<inherited>false</inherited>
								<configuration>
									<executable>${project.basedir}/generated/checkout-branch.sh</executable>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		<profile>
			<id>prepare-release</id>
			<properties>
				<versionBranch>master</versionBranch>
				<releaseVersion>1.9.1</releaseVersion>
				<snapshotVersion>1.9.1-SNAPSHOT</snapshotVersion>
			</properties>
			<build>
				<plugins>
					<plugin>
						<artifactId>exec-maven-plugin</artifactId>
						<groupId>org.codehaus.mojo</groupId>
						<version>1.3.2</version>
						<executions>
							<execution>
								<!-- runs the script to set the tag version -->
								<id>set-tag-version</id>
								<phase>initialize</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<inherited>false</inherited>
								<configuration>
									<executable>${project.basedir}/generated/setTagVersion.sh</executable>
								</configuration>
							</execution>
							<execution>
								<!-- commits files with tag-version changes in the local repo -->
								<id>commit-version-change-tag</id>
								<phase>initialize</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<inherited>false</inherited>
								<configuration>
									<executable>${project.basedir}/generated/commitTagVersionChange.sh</executable>
								</configuration>
							</execution>
							<execution>
								<!-- tags with the given version -->
								<id>tag-version</id>
								<phase>initialize</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<inherited>false</inherited>
								<configuration>
									<executable>${project.basedir}/generated/tag-version.sh</executable>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>push-commits</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>exec-maven-plugin</artifactId>
						<groupId>org.codehaus.mojo</groupId>
						<version>1.3.2</version>
						<executions>
							<execution>
								<!-- runs the script to push all commits to remote repo -->
								<id>push-commits</id>
								<phase>initialize</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<inherited>false</inherited>
								<configuration>
									<executable>${project.basedir}/generated/pushAllCommits.sh</executable>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>set-next-devel-iteration</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>exec-maven-plugin</artifactId>
						<groupId>org.codehaus.mojo</groupId>
						<version>1.3.2</version>
						<executions>
							<execution>
								<!-- runs the script to set next snapshot version -->
								<id>set-snapshot-version</id>
								<phase>initialize</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<inherited>false</inherited>
								<configuration>
									<executable>${project.basedir}/generated/setSnapshotVersion.sh</executable>
								</configuration>
							</execution>
							<execution>
								<!-- commit files with snapshot-version changes in the local repo -->
								<id>commit-version-change-snapshot</id>
								<phase>initialize</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<inherited>false</inherited>
								<configuration>
									<executable>${project.basedir}/generated/commitSnapshotVersionChange.sh</executable>
								</configuration>
							</execution>
							<execution>
								<!-- runs the script to push all commits to remote repo -->
								<id>push-next-devel-commits</id>
								<phase>initialize</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<inherited>false</inherited>
								<configuration>
									<executable>${project.basedir}/generated/pushSnapshotCommitsOnly.sh</executable>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.sos-berlin.jobscheduler.engine</groupId>
                <artifactId>engine-job-api</artifactId>
                <version>${sos.engine.version}</version>
            </dependency>
            <dependency>
                <groupId>com.sos-berlin.jobscheduler.enginedoc</groupId>
                <artifactId>enginedoc-common</artifactId>
                <version>${sos.engine.version}</version>
            </dependency>
            <dependency>
                <groupId>com.sos-berlin.jobscheduler.engine</groupId>
                <artifactId>engine-kernel</artifactId>
                <version>${sos.engine.version}</version>
            </dependency>
            <dependency>
                <groupId>com.sos-berlin.jobscheduler.engine</groupId>
                <artifactId>engine-common</artifactId>
                <version>${sos.engine.version}</version>
            </dependency>
            <dependency>
                <groupId>com.sos-berlin.jobscheduler.engine</groupId>
                <artifactId>engine-test</artifactId>
                <version>${sos.engine.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

</project>
